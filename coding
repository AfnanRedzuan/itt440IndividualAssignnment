#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_CHILDREN 5 // Maximum number of child processes

int main() {
    int i, num_children;
    int fd[2]; // File descriptor for pipe
    char message[256]; // Message buffer

    // Create a pipe
    if (pipe(fd) == -1) {
        perror("Pipe creation failed");
        exit(1);
    }

    printf("Enter a message to send to child processes: ");
    fgets(message, sizeof(message), stdin);

    printf("Enter the number of child processes to create (max %d): ", MAX_CHILDREN);
    scanf("%d", &num_children);

    // Fork into multiple child processes
    for (i = 0; i < num_children; i++) {
        pid_t pid = fork();

        if (pid < 0) {
            perror("Fork failed");
            exit(1);
        } else if (pid == 0) {
            // Child process

            // Close the read end of the pipe
            close(fd[0]);

            printf("Child process %d with PID %d received message: %s", i + 1, getpid(), message);

            // Write the message to the pipe
            write(fd[1], message, sizeof(message));
            exit(0);
        }
    }

    // Parent process

    // Close the write end of the pipe
    close(fd[1]);

    // Wait for all child processes to finish
    for (i = 0; i < num_children; i++) {
        wait(NULL);
    }

    printf("All child processes have terminated.\n");

    return 0;
}
